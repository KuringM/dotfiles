# 锚点
pr:
  &pr {
    type: select,
    proxies:
      [
        🚀 Manual,
        🔯 香港故转,
        🔯 日本故转,
        ♻️ 香港自动,
        ♻️ 日本自动,
        ♻️ 美国自动,
        ♻️ 自动选择,
        🇭🇰 Hong Kong,
        🇨🇳 Taiwan,
        🇯🇵 Japan,
        🇸🇬Singapore,
        🇺🇲 United States,
        🌐 全部节点,
        ⭕ 自建节点,
        🔗 链式代理,
        🟢 Direct,
      ],
  }

# 机场订阅，名称不能重复
proxy-providers:
  Airport_01:
    type: http
    interval: 1800
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🟢 Direct
    url: ""
  # Airport:
  #   type: http
  #   interval: 1800
  #   health-check:
  #     enable: true
  #     url: https://www.gstatic.com/generate_204
  #     interval: 300
  #   proxy: 🟢 Direct
  #   url: "订阅"
  #   override:
  #     skip-cert-verify: true
  #     udp: true
  #     down: "50 Mbps"
  #     up: "10 Mbps"

# 用于下载订阅时指定UA
global-ua: clash.meta

# 全局配置
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
ipv6: false
allow-lan: true
unified-delay: true
tcp-concurrent: true
# interface-name: eth0  （路由器下根据情况指定出站接口）
authentication:
  - name:passwd

geodata-mode: false
# GEO 文件加载模式（standard：标准加载器/memconservative：专为内存受限 (小内存) 设备优化的加载器 (默认值)）
geodata-loader: standard
geo-auto-update: true
geo-update-interval: 48
geox-url:
  geosite: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.metadb"
  geoip: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.dat"
  asn: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/GeoLite2-ASN.mmdb"

# 控制面板
external-controller: 0.0.0.0:9090
secret: ""
external-ui: ui
external-ui-url: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"
# 下载面板地址可更换：https://mirror.ghproxy.com/https://github.com/MetaCubeX/Yacd-meta/archive/gh-pages.zip

# 匹配进程 always/strict/off
find-process-mode: strict
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 30

# 策略组选择和fakeip缓存
profile:
  store-selected: true
  store-fake-ip: true

# 流量嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - +.v2ex.com
  skip-domain:
    - "Mijia Cloud"
    - "dlg.io.mi.com"
    - "+.push.apple.com"
    - "+.apple.com"

# 代理模式
tun:
  enable: true
  stack: mixed
  mtu: 9000
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  # 模式切换 redir-host / fake-ip
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  # 模式切换 whitelist/blacklist
  # 黑名单模式表示如果匹配成功则不返回 Fake-IP, 白名单模式时只有匹配成功才返回 Fake-IP
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "+.lan"
    - "+.local"
    - geosite:private
    - geosite:cn
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  proxy-server-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
  nameserver-policy:
    "rule-set:private_domain,cn_domain":
      - 223.5.5.5
      - 119.29.29.29
    "rule-set:geolocation-!cn":
      - "https://dns.cloudflare.com/dns-query"
      - "https://dns.google/dns-query"

proxies:
  - name: "🟢 Direct"
    type: direct
    udp: true

# 策略组
proxy-groups:
  - {
      name: 🚀 Manual,
      type: select,
      proxies:
        [
          🔯 香港故转,
          🔯 日本故转,
          ♻️ 香港自动,
          ♻️ 日本自动,
          ♻️ 美国自动,
          ♻️ 自动选择,
          🇭🇰 Hong Kong,
          🇨🇳 Taiwan,
          🇯🇵 Japan,
          🇸🇬Singapore,
          🇺🇲 United States,
          🌐 全部节点,
          ⭕ 自建节点,
          🔗 链式代理,
          🟢 Direct,
        ],
    }
  - { name: 📹 YouTube, <<: *pr }
  - { name: 🍀 Google, <<: *pr }
  - { name: 🤖 ChatGPT, <<: *pr }
  - { name: 👨🏿‍💻 GitHub, <<: *pr }
  - { name: 🐬 OneDrive, <<: *pr }
  - { name: 🪟 Microsoft, <<: *pr }
  - { name: 🎵 TikTok, <<: *pr }
  - { name: 📲 Telegram, <<: *pr }
  - { name: 🎥 NETFLIX, <<: *pr }
  - { name: ✈️ Speedtest, <<: *pr }
  - { name: 💶 PayPal, <<: *pr }
  - { name: 🍎 Apple, type: select, proxies: [🟢 Direct, 🚀 Manual] }
  - { name: 🔗 链式代理, type: relay, proxies: [🇺🇲 United States, ⭕ 自建节点] }
  - { name: 🎯 全球直连, type: select, proxies: [🟢 Direct, 🚀 Manual] }
  - { name: 🐟 漏网之鱼, <<: *pr }
  - { name: ⭕ 自建节点, type: select, include-all: true, filter: "(?i)(自建)" }
  - {
      name: 🇭🇰 Hong Kong,
      type: select,
      include-all: true,
      filter: "(?i)港|hk|hongkong|hong kong",
    }
  - {
      name: 🇨🇳 Taiwan,
      type: select,
      include-all: true,
      filter: "(?i)台湾|台灣|臺灣|TW|(?i)Taiwan",
    }
  - {
      name: 🇯🇵 Japan,
      type: select,
      include-all: true,
      filter: "(?i)日|jp|japan",
    }
  - {
      name: 🇺🇲 United States,
      type: select,
      include-all: true,
      filter: "(?i)美|us|unitedstates|united states",
    }
  - {
      name: 🇸🇬Singapore,
      type: select,
      include-all: true,
      filter: "(?=.*(新加坡|狮城|SG|(?i)Singapore))^((?!(手游|游戏|(?i)game)).)*$",
    }
  - {
      name: 🔯 香港故转,
      type: fallback,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$",
    }
  - {
      name: 🔯 日本故转,
      type: fallback,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$",
    }
  - {
      name: ♻️ 香港自动,
      type: url-test,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$",
    }
  - {
      name: ♻️ 日本自动,
      type: url-test,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$",
    }
  - {
      name: ♻️ 美国自动,
      type: url-test,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$",
    }
  - {
      name: ♻️ 自动选择,
      type: url-test,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: "^((?!(Direct|直连|到期|流量|群组)).)*$",
    }
  - { name: 🌐 全部节点, type: select, include-all: true }
rules:
  - RULE-SET,private_domain,🟢 Direct
  - RULE-SET,direct1,🟢 Direct
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,free,🔗 链式代理
  - RULE-SET,proxylite,🚀 Manual
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,geolocation-!cn,🚀 Manual
  - RULE-SET,cn_domain,🎯 全球直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 全球直连
  - MATCH,🐟 漏网之鱼
rule-anchor:
  ip: &ip { type: http, interval: 86400, behavior: ipcidr, format: mrs }
  domain: &domain { type: http, interval: 86400, behavior: domain, format: mrs }
  mk: &mk { type: http, interval: 86400, behavior: domain, format: text }
  class:
    &class { type: http, interval: 86400, behavior: classical, format: text }
rule-providers:
  private_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs",
    }
  direct1:
    {
      <<: *class,
      url: "https://raw.githubusercontent.com/KuringM/dotfiles/master/.mk/NW/Direct.list",
    }
  proxylite:
    {
      <<: *mk,
      url: "https://raw.githubusercontent.com/KuringM/dotfiles/master/.mk/NW/ProxyLite.list",
    }
  ai:
    {
      <<: *mk,
      url: "https://raw.githubusercontent.com/KuringM/dotfiles/master/.mk/NW/AI.list",
    }
  free:
    {
      <<: *mk,
      url: "https://raw.githubusercontent.com/KuringM/dotfiles/master/.mk/NW/Free.list",
    }
  youtube_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs",
    }
  google_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs",
    }
  github_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs",
    }
  telegram_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs",
    }
  netflix_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs",
    }
  paypal_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs",
    }
  onedrive_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs",
    }
  microsoft_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs",
    }
  apple_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs",
    }
  speedtest_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs",
    }
  tiktok_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs",
    }
  gfw_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs",
    }
  geolocation-!cn:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs",
    }
  cn_domain:
    {
      <<: *domain,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs",
    }

  cn_ip:
    {
      <<: *ip,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs",
    }
  google_ip:
    {
      <<: *ip,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs",
    }
  telegram_ip:
    {
      <<: *ip,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs",
    }
  netflix_ip:
    {
      <<: *ip,
      url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs",
    }
